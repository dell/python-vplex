# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StorageGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'masking_views': 'list[str]',
        'number_of_volumes': 'str',
        'parent_storage_group': 'str',
        'policy': 'str',
        'srp': 'str'
    }

    attribute_map = {
        'name': 'name',
        'masking_views': 'masking_views',
        'number_of_volumes': 'number_of_volumes',
        'parent_storage_group': 'parent_storage_group',
        'policy': 'policy',
        'srp': 'SRP'
    }

    def __init__(self, name=None, masking_views=None, number_of_volumes=None, parent_storage_group=None, policy=None, srp=None):  # noqa: E501
        """StorageGroup - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._masking_views = None
        self._number_of_volumes = None
        self._parent_storage_group = None
        self._policy = None
        self._srp = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if masking_views is not None:
            self.masking_views = masking_views
        if number_of_volumes is not None:
            self.number_of_volumes = number_of_volumes
        if parent_storage_group is not None:
            self.parent_storage_group = parent_storage_group
        if policy is not None:
            self.policy = policy
        if srp is not None:
            self.srp = srp

    @property
    def name(self):
        """Gets the name of this StorageGroup.  # noqa: E501


        :return: The name of this StorageGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageGroup.


        :param name: The name of this StorageGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def masking_views(self):
        """Gets the masking_views of this StorageGroup.  # noqa: E501


        :return: The masking_views of this StorageGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._masking_views

    @masking_views.setter
    def masking_views(self, masking_views):
        """Sets the masking_views of this StorageGroup.


        :param masking_views: The masking_views of this StorageGroup.  # noqa: E501
        :type: list[str]
        """

        self._masking_views = masking_views

    @property
    def number_of_volumes(self):
        """Gets the number_of_volumes of this StorageGroup.  # noqa: E501


        :return: The number_of_volumes of this StorageGroup.  # noqa: E501
        :rtype: str
        """
        return self._number_of_volumes

    @number_of_volumes.setter
    def number_of_volumes(self, number_of_volumes):
        """Sets the number_of_volumes of this StorageGroup.


        :param number_of_volumes: The number_of_volumes of this StorageGroup.  # noqa: E501
        :type: str
        """

        self._number_of_volumes = number_of_volumes

    @property
    def parent_storage_group(self):
        """Gets the parent_storage_group of this StorageGroup.  # noqa: E501


        :return: The parent_storage_group of this StorageGroup.  # noqa: E501
        :rtype: str
        """
        return self._parent_storage_group

    @parent_storage_group.setter
    def parent_storage_group(self, parent_storage_group):
        """Sets the parent_storage_group of this StorageGroup.


        :param parent_storage_group: The parent_storage_group of this StorageGroup.  # noqa: E501
        :type: str
        """

        self._parent_storage_group = parent_storage_group

    @property
    def policy(self):
        """Gets the policy of this StorageGroup.  # noqa: E501


        :return: The policy of this StorageGroup.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this StorageGroup.


        :param policy: The policy of this StorageGroup.  # noqa: E501
        :type: str
        """

        self._policy = policy

    @property
    def srp(self):
        """Gets the srp of this StorageGroup.  # noqa: E501


        :return: The srp of this StorageGroup.  # noqa: E501
        :rtype: str
        """
        return self._srp

    @srp.setter
    def srp(self, srp):
        """Sets the srp of this StorageGroup.


        :param srp: The srp of this StorageGroup.  # noqa: E501
        :type: str
        """

        self._srp = srp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
