# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vplexapi.models.jobs_storage_pools import JobsStoragePools  # noqa: F401,E501


class ViasPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_of_volumes': 'float',
        'capacity': 'float',
        'base_name': 'str',
        'job_name': 'str',
        'thin': 'bool',
        'storage_pools': 'list[JobsStoragePools]',
        'storage_views': 'list[str]',
        'consistency_group': 'str'
    }

    attribute_map = {
        'number_of_volumes': 'number_of_volumes',
        'capacity': 'capacity',
        'base_name': 'base_name',
        'job_name': 'job_name',
        'thin': 'thin',
        'storage_pools': 'storage_pools',
        'storage_views': 'storage_views',
        'consistency_group': 'consistency_group'
    }

    def __init__(self, number_of_volumes=None, capacity=None, base_name=None, job_name=None, thin=None, storage_pools=None, storage_views=None, consistency_group=None):  # noqa: E501
        """ViasPayload - a model defined in Swagger"""  # noqa: E501

        self._number_of_volumes = None
        self._capacity = None
        self._base_name = None
        self._job_name = None
        self._thin = None
        self._storage_pools = None
        self._storage_views = None
        self._consistency_group = None
        self.discriminator = None

        self.number_of_volumes = number_of_volumes
        self.capacity = capacity
        self.base_name = base_name
        if job_name is not None:
            self.job_name = job_name
        if thin is not None:
            self.thin = thin
        self.storage_pools = storage_pools
        self.storage_views = storage_views
        if consistency_group is not None:
            self.consistency_group = consistency_group

    @property
    def number_of_volumes(self):
        """Gets the number_of_volumes of this ViasPayload.  # noqa: E501

        The number of virtual volumes to provision.   # noqa: E501

        :return: The number_of_volumes of this ViasPayload.  # noqa: E501
        :rtype: float
        """
        return self._number_of_volumes

    @number_of_volumes.setter
    def number_of_volumes(self, number_of_volumes):
        """Sets the number_of_volumes of this ViasPayload.

        The number of virtual volumes to provision.   # noqa: E501

        :param number_of_volumes: The number_of_volumes of this ViasPayload.  # noqa: E501
        :type: float
        """
        if number_of_volumes is None:
            raise ValueError("Invalid value for `number_of_volumes`, must not be `None`")  # noqa: E501

        self._number_of_volumes = number_of_volumes

    @property
    def capacity(self):
        """Gets the capacity of this ViasPayload.  # noqa: E501

        The capacity of each virtual volume, in bytes.   # noqa: E501

        :return: The capacity of this ViasPayload.  # noqa: E501
        :rtype: float
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ViasPayload.

        The capacity of each virtual volume, in bytes.   # noqa: E501

        :param capacity: The capacity of this ViasPayload.  # noqa: E501
        :type: float
        """
        if capacity is None:
            raise ValueError("Invalid value for `capacity`, must not be `None`")  # noqa: E501

        self._capacity = capacity

    @property
    def base_name(self):
        """Gets the base_name of this ViasPayload.  # noqa: E501

        The prefix to use when naming each virtual volume.   # noqa: E501

        :return: The base_name of this ViasPayload.  # noqa: E501
        :rtype: str
        """
        return self._base_name

    @base_name.setter
    def base_name(self, base_name):
        """Sets the base_name of this ViasPayload.

        The prefix to use when naming each virtual volume.   # noqa: E501

        :param base_name: The base_name of this ViasPayload.  # noqa: E501
        :type: str
        """
        if base_name is None:
            raise ValueError("Invalid value for `base_name`, must not be `None`")  # noqa: E501

        self._base_name = base_name

    @property
    def job_name(self):
        """Gets the job_name of this ViasPayload.  # noqa: E501

        The name for the provisioning job. If omitted a random name is generated.   # noqa: E501

        :return: The job_name of this ViasPayload.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this ViasPayload.

        The name for the provisioning job. If omitted a random name is generated.   # noqa: E501

        :param job_name: The job_name of this ViasPayload.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def thin(self):
        """Gets the thin of this ViasPayload.  # noqa: E501

        Whether the virtual volumes and all underlying storage should be thin provisioned.   # noqa: E501

        :return: The thin of this ViasPayload.  # noqa: E501
        :rtype: bool
        """
        return self._thin

    @thin.setter
    def thin(self, thin):
        """Sets the thin of this ViasPayload.

        Whether the virtual volumes and all underlying storage should be thin provisioned.   # noqa: E501

        :param thin: The thin of this ViasPayload.  # noqa: E501
        :type: bool
        """

        self._thin = thin

    @property
    def storage_pools(self):
        """Gets the storage_pools of this ViasPayload.  # noqa: E501


        :return: The storage_pools of this ViasPayload.  # noqa: E501
        :rtype: list[JobsStoragePools]
        """
        return self._storage_pools

    @storage_pools.setter
    def storage_pools(self, storage_pools):
        """Sets the storage_pools of this ViasPayload.


        :param storage_pools: The storage_pools of this ViasPayload.  # noqa: E501
        :type: list[JobsStoragePools]
        """
        if storage_pools is None:
            raise ValueError("Invalid value for `storage_pools`, must not be `None`")  # noqa: E501

        self._storage_pools = storage_pools

    @property
    def storage_views(self):
        """Gets the storage_views of this ViasPayload.  # noqa: E501


        :return: The storage_views of this ViasPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._storage_views

    @storage_views.setter
    def storage_views(self, storage_views):
        """Sets the storage_views of this ViasPayload.


        :param storage_views: The storage_views of this ViasPayload.  # noqa: E501
        :type: list[str]
        """
        if storage_views is None:
            raise ValueError("Invalid value for `storage_views`, must not be `None`")  # noqa: E501

        self._storage_views = storage_views

    @property
    def consistency_group(self):
        """Gets the consistency_group of this ViasPayload.  # noqa: E501

        Which consistency group the virtual volumes will be added to.   # noqa: E501

        :return: The consistency_group of this ViasPayload.  # noqa: E501
        :rtype: str
        """
        return self._consistency_group

    @consistency_group.setter
    def consistency_group(self, consistency_group):
        """Sets the consistency_group of this ViasPayload.

        Which consistency group the virtual volumes will be added to.   # noqa: E501

        :param consistency_group: The consistency_group of this ViasPayload.  # noqa: E501
        :type: str
        """

        self._consistency_group = consistency_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ViasPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViasPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
