# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vplexapi.models.communication_status import CommunicationStatus  # noqa: F401,E501
from vplexapi.models.health_state import HealthState  # noqa: F401,E501
from vplexapi.models.operational_status import OperationalStatus  # noqa: F401,E501


class Director(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_boot': 'bool',
        'auto_restart': 'bool',
        'cluster_id': 'int',
        'communication_status': 'CommunicationStatus',
        'director_count': 'int',
        'director_family': 'str',
        'director_id': 'str',
        'director_type': 'str',
        'engine_id': 'str',
        'failover_hostname': 'str',
        'firmware_uptime': 'int',
        'health_indications': 'list[str]',
        'health_state': 'HealthState',
        'hostname': 'str',
        'name': 'str',
        'operational_status': 'OperationalStatus',
        'os_uptime': 'int',
        'port': 'int',
        'run_level': 'int',
        'serial_number': 'str',
        'system_time': 'str',
        'temperature_threshold_exceeded': 'bool',
        'voltage_threshold_exceeded': 'bool'
    }

    attribute_map = {
        'auto_boot': 'auto_boot',
        'auto_restart': 'auto_restart',
        'cluster_id': 'cluster_id',
        'communication_status': 'communication_status',
        'director_count': 'director_count',
        'director_family': 'director_family',
        'director_id': 'director_id',
        'director_type': 'director_type',
        'engine_id': 'engine_id',
        'failover_hostname': 'failover_hostname',
        'firmware_uptime': 'firmware_uptime',
        'health_indications': 'health_indications',
        'health_state': 'health_state',
        'hostname': 'hostname',
        'name': 'name',
        'operational_status': 'operational_status',
        'os_uptime': 'os_uptime',
        'port': 'port',
        'run_level': 'run_level',
        'serial_number': 'serial_number',
        'system_time': 'system_time',
        'temperature_threshold_exceeded': 'temperature_threshold_exceeded',
        'voltage_threshold_exceeded': 'voltage_threshold_exceeded'
    }

    def __init__(self, auto_boot=None, auto_restart=None, cluster_id=None, communication_status=None, director_count=None, director_family=None, director_id=None, director_type=None, engine_id=None, failover_hostname=None, firmware_uptime=None, health_indications=None, health_state=None, hostname=None, name=None, operational_status=None, os_uptime=None, port=None, run_level=None, serial_number=None, system_time=None, temperature_threshold_exceeded=None, voltage_threshold_exceeded=None):  # noqa: E501
        """Director - a model defined in Swagger"""  # noqa: E501

        self._auto_boot = None
        self._auto_restart = None
        self._cluster_id = None
        self._communication_status = None
        self._director_count = None
        self._director_family = None
        self._director_id = None
        self._director_type = None
        self._engine_id = None
        self._failover_hostname = None
        self._firmware_uptime = None
        self._health_indications = None
        self._health_state = None
        self._hostname = None
        self._name = None
        self._operational_status = None
        self._os_uptime = None
        self._port = None
        self._run_level = None
        self._serial_number = None
        self._system_time = None
        self._temperature_threshold_exceeded = None
        self._voltage_threshold_exceeded = None
        self.discriminator = None

        if auto_boot is not None:
            self.auto_boot = auto_boot
        if auto_restart is not None:
            self.auto_restart = auto_restart
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if communication_status is not None:
            self.communication_status = communication_status
        if director_count is not None:
            self.director_count = director_count
        if director_family is not None:
            self.director_family = director_family
        if director_id is not None:
            self.director_id = director_id
        if director_type is not None:
            self.director_type = director_type
        if engine_id is not None:
            self.engine_id = engine_id
        if failover_hostname is not None:
            self.failover_hostname = failover_hostname
        if firmware_uptime is not None:
            self.firmware_uptime = firmware_uptime
        if health_indications is not None:
            self.health_indications = health_indications
        if health_state is not None:
            self.health_state = health_state
        if hostname is not None:
            self.hostname = hostname
        if name is not None:
            self.name = name
        if operational_status is not None:
            self.operational_status = operational_status
        if os_uptime is not None:
            self.os_uptime = os_uptime
        if port is not None:
            self.port = port
        if run_level is not None:
            self.run_level = run_level
        if serial_number is not None:
            self.serial_number = serial_number
        if system_time is not None:
            self.system_time = system_time
        if temperature_threshold_exceeded is not None:
            self.temperature_threshold_exceeded = temperature_threshold_exceeded
        if voltage_threshold_exceeded is not None:
            self.voltage_threshold_exceeded = voltage_threshold_exceeded

    @property
    def auto_boot(self):
        """Gets the auto_boot of this Director.  # noqa: E501


        :return: The auto_boot of this Director.  # noqa: E501
        :rtype: bool
        """
        return self._auto_boot

    @auto_boot.setter
    def auto_boot(self, auto_boot):
        """Sets the auto_boot of this Director.


        :param auto_boot: The auto_boot of this Director.  # noqa: E501
        :type: bool
        """

        self._auto_boot = auto_boot

    @property
    def auto_restart(self):
        """Gets the auto_restart of this Director.  # noqa: E501


        :return: The auto_restart of this Director.  # noqa: E501
        :rtype: bool
        """
        return self._auto_restart

    @auto_restart.setter
    def auto_restart(self, auto_restart):
        """Sets the auto_restart of this Director.


        :param auto_restart: The auto_restart of this Director.  # noqa: E501
        :type: bool
        """

        self._auto_restart = auto_restart

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Director.  # noqa: E501


        :return: The cluster_id of this Director.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Director.


        :param cluster_id: The cluster_id of this Director.  # noqa: E501
        :type: int
        """

        self._cluster_id = cluster_id

    @property
    def communication_status(self):
        """Gets the communication_status of this Director.  # noqa: E501


        :return: The communication_status of this Director.  # noqa: E501
        :rtype: CommunicationStatus
        """
        return self._communication_status

    @communication_status.setter
    def communication_status(self, communication_status):
        """Sets the communication_status of this Director.


        :param communication_status: The communication_status of this Director.  # noqa: E501
        :type: CommunicationStatus
        """

        self._communication_status = communication_status

    @property
    def director_count(self):
        """Gets the director_count of this Director.  # noqa: E501


        :return: The director_count of this Director.  # noqa: E501
        :rtype: int
        """
        return self._director_count

    @director_count.setter
    def director_count(self, director_count):
        """Sets the director_count of this Director.


        :param director_count: The director_count of this Director.  # noqa: E501
        :type: int
        """

        self._director_count = director_count

    @property
    def director_family(self):
        """Gets the director_family of this Director.  # noqa: E501


        :return: The director_family of this Director.  # noqa: E501
        :rtype: str
        """
        return self._director_family

    @director_family.setter
    def director_family(self, director_family):
        """Sets the director_family of this Director.


        :param director_family: The director_family of this Director.  # noqa: E501
        :type: str
        """

        self._director_family = director_family

    @property
    def director_id(self):
        """Gets the director_id of this Director.  # noqa: E501


        :return: The director_id of this Director.  # noqa: E501
        :rtype: str
        """
        return self._director_id

    @director_id.setter
    def director_id(self, director_id):
        """Sets the director_id of this Director.


        :param director_id: The director_id of this Director.  # noqa: E501
        :type: str
        """

        self._director_id = director_id

    @property
    def director_type(self):
        """Gets the director_type of this Director.  # noqa: E501


        :return: The director_type of this Director.  # noqa: E501
        :rtype: str
        """
        return self._director_type

    @director_type.setter
    def director_type(self, director_type):
        """Sets the director_type of this Director.


        :param director_type: The director_type of this Director.  # noqa: E501
        :type: str
        """

        self._director_type = director_type

    @property
    def engine_id(self):
        """Gets the engine_id of this Director.  # noqa: E501


        :return: The engine_id of this Director.  # noqa: E501
        :rtype: str
        """
        return self._engine_id

    @engine_id.setter
    def engine_id(self, engine_id):
        """Sets the engine_id of this Director.


        :param engine_id: The engine_id of this Director.  # noqa: E501
        :type: str
        """

        self._engine_id = engine_id

    @property
    def failover_hostname(self):
        """Gets the failover_hostname of this Director.  # noqa: E501


        :return: The failover_hostname of this Director.  # noqa: E501
        :rtype: str
        """
        return self._failover_hostname

    @failover_hostname.setter
    def failover_hostname(self, failover_hostname):
        """Sets the failover_hostname of this Director.


        :param failover_hostname: The failover_hostname of this Director.  # noqa: E501
        :type: str
        """

        self._failover_hostname = failover_hostname

    @property
    def firmware_uptime(self):
        """Gets the firmware_uptime of this Director.  # noqa: E501


        :return: The firmware_uptime of this Director.  # noqa: E501
        :rtype: int
        """
        return self._firmware_uptime

    @firmware_uptime.setter
    def firmware_uptime(self, firmware_uptime):
        """Sets the firmware_uptime of this Director.


        :param firmware_uptime: The firmware_uptime of this Director.  # noqa: E501
        :type: int
        """

        self._firmware_uptime = firmware_uptime

    @property
    def health_indications(self):
        """Gets the health_indications of this Director.  # noqa: E501


        :return: The health_indications of this Director.  # noqa: E501
        :rtype: list[str]
        """
        return self._health_indications

    @health_indications.setter
    def health_indications(self, health_indications):
        """Sets the health_indications of this Director.


        :param health_indications: The health_indications of this Director.  # noqa: E501
        :type: list[str]
        """

        self._health_indications = health_indications

    @property
    def health_state(self):
        """Gets the health_state of this Director.  # noqa: E501


        :return: The health_state of this Director.  # noqa: E501
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this Director.


        :param health_state: The health_state of this Director.  # noqa: E501
        :type: HealthState
        """

        self._health_state = health_state

    @property
    def hostname(self):
        """Gets the hostname of this Director.  # noqa: E501


        :return: The hostname of this Director.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Director.


        :param hostname: The hostname of this Director.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def name(self):
        """Gets the name of this Director.  # noqa: E501


        :return: The name of this Director.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Director.


        :param name: The name of this Director.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operational_status(self):
        """Gets the operational_status of this Director.  # noqa: E501


        :return: The operational_status of this Director.  # noqa: E501
        :rtype: OperationalStatus
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this Director.


        :param operational_status: The operational_status of this Director.  # noqa: E501
        :type: OperationalStatus
        """

        self._operational_status = operational_status

    @property
    def os_uptime(self):
        """Gets the os_uptime of this Director.  # noqa: E501


        :return: The os_uptime of this Director.  # noqa: E501
        :rtype: int
        """
        return self._os_uptime

    @os_uptime.setter
    def os_uptime(self, os_uptime):
        """Sets the os_uptime of this Director.


        :param os_uptime: The os_uptime of this Director.  # noqa: E501
        :type: int
        """

        self._os_uptime = os_uptime

    @property
    def port(self):
        """Gets the port of this Director.  # noqa: E501


        :return: The port of this Director.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Director.


        :param port: The port of this Director.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def run_level(self):
        """Gets the run_level of this Director.  # noqa: E501


        :return: The run_level of this Director.  # noqa: E501
        :rtype: int
        """
        return self._run_level

    @run_level.setter
    def run_level(self, run_level):
        """Sets the run_level of this Director.


        :param run_level: The run_level of this Director.  # noqa: E501
        :type: int
        """

        self._run_level = run_level

    @property
    def serial_number(self):
        """Gets the serial_number of this Director.  # noqa: E501


        :return: The serial_number of this Director.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Director.


        :param serial_number: The serial_number of this Director.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def system_time(self):
        """Gets the system_time of this Director.  # noqa: E501


        :return: The system_time of this Director.  # noqa: E501
        :rtype: str
        """
        return self._system_time

    @system_time.setter
    def system_time(self, system_time):
        """Sets the system_time of this Director.


        :param system_time: The system_time of this Director.  # noqa: E501
        :type: str
        """

        self._system_time = system_time

    @property
    def temperature_threshold_exceeded(self):
        """Gets the temperature_threshold_exceeded of this Director.  # noqa: E501


        :return: The temperature_threshold_exceeded of this Director.  # noqa: E501
        :rtype: bool
        """
        return self._temperature_threshold_exceeded

    @temperature_threshold_exceeded.setter
    def temperature_threshold_exceeded(self, temperature_threshold_exceeded):
        """Sets the temperature_threshold_exceeded of this Director.


        :param temperature_threshold_exceeded: The temperature_threshold_exceeded of this Director.  # noqa: E501
        :type: bool
        """

        self._temperature_threshold_exceeded = temperature_threshold_exceeded

    @property
    def voltage_threshold_exceeded(self):
        """Gets the voltage_threshold_exceeded of this Director.  # noqa: E501


        :return: The voltage_threshold_exceeded of this Director.  # noqa: E501
        :rtype: bool
        """
        return self._voltage_threshold_exceeded

    @voltage_threshold_exceeded.setter
    def voltage_threshold_exceeded(self, voltage_threshold_exceeded):
        """Sets the voltage_threshold_exceeded of this Director.


        :param voltage_threshold_exceeded: The voltage_threshold_exceeded of this Director.  # noqa: E501
        :type: bool
        """

        self._voltage_threshold_exceeded = voltage_threshold_exceeded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Director, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Director):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
