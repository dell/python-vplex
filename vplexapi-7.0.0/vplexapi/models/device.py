# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Device(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'block_count': 'float',
        'block_size': 'float',
        'capacity': 'float',
        'transfer_size': 'float',
        'health_indications': 'list[str]',
        'health_state': 'str',
        'operational_status': 'str',
        'virtual_volume': 'str',
        'visibility': 'str',
        'locality': 'str',
        'geometry': 'str',
        'application_consistent': 'bool',
        'auto_resume': 'bool',
        'rebuild_eta': 'str',
        'rebuild_allowed': 'bool',
        'rebuild_progress': 'str',
        'rebuild_status': 'str',
        'rebuild_type': 'str',
        'service_status': 'str',
        'storage_array_family': 'str',
        'stripe_depth': 'str',
        'system_id': 'str',
        'thin_capable': 'bool',
        'top_level': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'block_count': 'block_count',
        'block_size': 'block_size',
        'capacity': 'capacity',
        'transfer_size': 'transfer_size',
        'health_indications': 'health_indications',
        'health_state': 'health_state',
        'operational_status': 'operational_status',
        'virtual_volume': 'virtual_volume',
        'visibility': 'visibility',
        'locality': 'locality',
        'geometry': 'geometry',
        'application_consistent': 'application_consistent',
        'auto_resume': 'auto_resume',
        'rebuild_eta': 'rebuild_eta',
        'rebuild_allowed': 'rebuild_allowed',
        'rebuild_progress': 'rebuild_progress',
        'rebuild_status': 'rebuild_status',
        'rebuild_type': 'rebuild_type',
        'service_status': 'service_status',
        'storage_array_family': 'storage_array_family',
        'stripe_depth': 'stripe_depth',
        'system_id': 'system_id',
        'thin_capable': 'thin_capable',
        'top_level': 'top_level'
    }

    def __init__(self, name=None, block_count=None, block_size=None, capacity=None, transfer_size=None, health_indications=None, health_state=None, operational_status=None, virtual_volume=None, visibility=None, locality=None, geometry=None, application_consistent=None, auto_resume=None, rebuild_eta=None, rebuild_allowed=None, rebuild_progress=None, rebuild_status=None, rebuild_type=None, service_status=None, storage_array_family=None, stripe_depth=None, system_id=None, thin_capable=None, top_level=None):  # noqa: E501
        """Device - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._block_count = None
        self._block_size = None
        self._capacity = None
        self._transfer_size = None
        self._health_indications = None
        self._health_state = None
        self._operational_status = None
        self._virtual_volume = None
        self._visibility = None
        self._locality = None
        self._geometry = None
        self._application_consistent = None
        self._auto_resume = None
        self._rebuild_eta = None
        self._rebuild_allowed = None
        self._rebuild_progress = None
        self._rebuild_status = None
        self._rebuild_type = None
        self._service_status = None
        self._storage_array_family = None
        self._stripe_depth = None
        self._system_id = None
        self._thin_capable = None
        self._top_level = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if block_count is not None:
            self.block_count = block_count
        if block_size is not None:
            self.block_size = block_size
        if capacity is not None:
            self.capacity = capacity
        if transfer_size is not None:
            self.transfer_size = transfer_size
        if health_indications is not None:
            self.health_indications = health_indications
        if health_state is not None:
            self.health_state = health_state
        if operational_status is not None:
            self.operational_status = operational_status
        if virtual_volume is not None:
            self.virtual_volume = virtual_volume
        if visibility is not None:
            self.visibility = visibility
        if locality is not None:
            self.locality = locality
        if geometry is not None:
            self.geometry = geometry
        if application_consistent is not None:
            self.application_consistent = application_consistent
        if auto_resume is not None:
            self.auto_resume = auto_resume
        if rebuild_eta is not None:
            self.rebuild_eta = rebuild_eta
        if rebuild_allowed is not None:
            self.rebuild_allowed = rebuild_allowed
        if rebuild_progress is not None:
            self.rebuild_progress = rebuild_progress
        if rebuild_status is not None:
            self.rebuild_status = rebuild_status
        if rebuild_type is not None:
            self.rebuild_type = rebuild_type
        if service_status is not None:
            self.service_status = service_status
        if storage_array_family is not None:
            self.storage_array_family = storage_array_family
        if stripe_depth is not None:
            self.stripe_depth = stripe_depth
        if system_id is not None:
            self.system_id = system_id
        if thin_capable is not None:
            self.thin_capable = thin_capable
        if top_level is not None:
            self.top_level = top_level

    @property
    def name(self):
        """Gets the name of this Device.  # noqa: E501


        :return: The name of this Device.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.


        :param name: The name of this Device.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def block_count(self):
        """Gets the block_count of this Device.  # noqa: E501


        :return: The block_count of this Device.  # noqa: E501
        :rtype: float
        """
        return self._block_count

    @block_count.setter
    def block_count(self, block_count):
        """Sets the block_count of this Device.


        :param block_count: The block_count of this Device.  # noqa: E501
        :type: float
        """

        self._block_count = block_count

    @property
    def block_size(self):
        """Gets the block_size of this Device.  # noqa: E501


        :return: The block_size of this Device.  # noqa: E501
        :rtype: float
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this Device.


        :param block_size: The block_size of this Device.  # noqa: E501
        :type: float
        """

        self._block_size = block_size

    @property
    def capacity(self):
        """Gets the capacity of this Device.  # noqa: E501


        :return: The capacity of this Device.  # noqa: E501
        :rtype: float
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Device.


        :param capacity: The capacity of this Device.  # noqa: E501
        :type: float
        """

        self._capacity = capacity

    @property
    def transfer_size(self):
        """Gets the transfer_size of this Device.  # noqa: E501


        :return: The transfer_size of this Device.  # noqa: E501
        :rtype: float
        """
        return self._transfer_size

    @transfer_size.setter
    def transfer_size(self, transfer_size):
        """Sets the transfer_size of this Device.


        :param transfer_size: The transfer_size of this Device.  # noqa: E501
        :type: float
        """

        self._transfer_size = transfer_size

    @property
    def health_indications(self):
        """Gets the health_indications of this Device.  # noqa: E501


        :return: The health_indications of this Device.  # noqa: E501
        :rtype: list[str]
        """
        return self._health_indications

    @health_indications.setter
    def health_indications(self, health_indications):
        """Sets the health_indications of this Device.


        :param health_indications: The health_indications of this Device.  # noqa: E501
        :type: list[str]
        """

        self._health_indications = health_indications

    @property
    def health_state(self):
        """Gets the health_state of this Device.  # noqa: E501


        :return: The health_state of this Device.  # noqa: E501
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this Device.


        :param health_state: The health_state of this Device.  # noqa: E501
        :type: str
        """

        self._health_state = health_state

    @property
    def operational_status(self):
        """Gets the operational_status of this Device.  # noqa: E501


        :return: The operational_status of this Device.  # noqa: E501
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this Device.


        :param operational_status: The operational_status of this Device.  # noqa: E501
        :type: str
        """

        self._operational_status = operational_status

    @property
    def virtual_volume(self):
        """Gets the virtual_volume of this Device.  # noqa: E501


        :return: The virtual_volume of this Device.  # noqa: E501
        :rtype: str
        """
        return self._virtual_volume

    @virtual_volume.setter
    def virtual_volume(self, virtual_volume):
        """Sets the virtual_volume of this Device.


        :param virtual_volume: The virtual_volume of this Device.  # noqa: E501
        :type: str
        """

        self._virtual_volume = virtual_volume

    @property
    def visibility(self):
        """Gets the visibility of this Device.  # noqa: E501


        :return: The visibility of this Device.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Device.


        :param visibility: The visibility of this Device.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    @property
    def locality(self):
        """Gets the locality of this Device.  # noqa: E501


        :return: The locality of this Device.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this Device.


        :param locality: The locality of this Device.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def geometry(self):
        """Gets the geometry of this Device.  # noqa: E501


        :return: The geometry of this Device.  # noqa: E501
        :rtype: str
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Device.


        :param geometry: The geometry of this Device.  # noqa: E501
        :type: str
        """

        self._geometry = geometry

    @property
    def application_consistent(self):
        """Gets the application_consistent of this Device.  # noqa: E501


        :return: The application_consistent of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._application_consistent

    @application_consistent.setter
    def application_consistent(self, application_consistent):
        """Sets the application_consistent of this Device.


        :param application_consistent: The application_consistent of this Device.  # noqa: E501
        :type: bool
        """

        self._application_consistent = application_consistent

    @property
    def auto_resume(self):
        """Gets the auto_resume of this Device.  # noqa: E501


        :return: The auto_resume of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._auto_resume

    @auto_resume.setter
    def auto_resume(self, auto_resume):
        """Sets the auto_resume of this Device.


        :param auto_resume: The auto_resume of this Device.  # noqa: E501
        :type: bool
        """

        self._auto_resume = auto_resume

    @property
    def rebuild_eta(self):
        """Gets the rebuild_eta of this Device.  # noqa: E501


        :return: The rebuild_eta of this Device.  # noqa: E501
        :rtype: str
        """
        return self._rebuild_eta

    @rebuild_eta.setter
    def rebuild_eta(self, rebuild_eta):
        """Sets the rebuild_eta of this Device.


        :param rebuild_eta: The rebuild_eta of this Device.  # noqa: E501
        :type: str
        """

        self._rebuild_eta = rebuild_eta

    @property
    def rebuild_allowed(self):
        """Gets the rebuild_allowed of this Device.  # noqa: E501


        :return: The rebuild_allowed of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._rebuild_allowed

    @rebuild_allowed.setter
    def rebuild_allowed(self, rebuild_allowed):
        """Sets the rebuild_allowed of this Device.


        :param rebuild_allowed: The rebuild_allowed of this Device.  # noqa: E501
        :type: bool
        """

        self._rebuild_allowed = rebuild_allowed

    @property
    def rebuild_progress(self):
        """Gets the rebuild_progress of this Device.  # noqa: E501


        :return: The rebuild_progress of this Device.  # noqa: E501
        :rtype: str
        """
        return self._rebuild_progress

    @rebuild_progress.setter
    def rebuild_progress(self, rebuild_progress):
        """Sets the rebuild_progress of this Device.


        :param rebuild_progress: The rebuild_progress of this Device.  # noqa: E501
        :type: str
        """

        self._rebuild_progress = rebuild_progress

    @property
    def rebuild_status(self):
        """Gets the rebuild_status of this Device.  # noqa: E501


        :return: The rebuild_status of this Device.  # noqa: E501
        :rtype: str
        """
        return self._rebuild_status

    @rebuild_status.setter
    def rebuild_status(self, rebuild_status):
        """Sets the rebuild_status of this Device.


        :param rebuild_status: The rebuild_status of this Device.  # noqa: E501
        :type: str
        """

        self._rebuild_status = rebuild_status

    @property
    def rebuild_type(self):
        """Gets the rebuild_type of this Device.  # noqa: E501


        :return: The rebuild_type of this Device.  # noqa: E501
        :rtype: str
        """
        return self._rebuild_type

    @rebuild_type.setter
    def rebuild_type(self, rebuild_type):
        """Sets the rebuild_type of this Device.


        :param rebuild_type: The rebuild_type of this Device.  # noqa: E501
        :type: str
        """

        self._rebuild_type = rebuild_type

    @property
    def service_status(self):
        """Gets the service_status of this Device.  # noqa: E501


        :return: The service_status of this Device.  # noqa: E501
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this Device.


        :param service_status: The service_status of this Device.  # noqa: E501
        :type: str
        """

        self._service_status = service_status

    @property
    def storage_array_family(self):
        """Gets the storage_array_family of this Device.  # noqa: E501


        :return: The storage_array_family of this Device.  # noqa: E501
        :rtype: str
        """
        return self._storage_array_family

    @storage_array_family.setter
    def storage_array_family(self, storage_array_family):
        """Sets the storage_array_family of this Device.


        :param storage_array_family: The storage_array_family of this Device.  # noqa: E501
        :type: str
        """

        self._storage_array_family = storage_array_family

    @property
    def stripe_depth(self):
        """Gets the stripe_depth of this Device.  # noqa: E501


        :return: The stripe_depth of this Device.  # noqa: E501
        :rtype: str
        """
        return self._stripe_depth

    @stripe_depth.setter
    def stripe_depth(self, stripe_depth):
        """Sets the stripe_depth of this Device.


        :param stripe_depth: The stripe_depth of this Device.  # noqa: E501
        :type: str
        """

        self._stripe_depth = stripe_depth

    @property
    def system_id(self):
        """Gets the system_id of this Device.  # noqa: E501


        :return: The system_id of this Device.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this Device.


        :param system_id: The system_id of this Device.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def thin_capable(self):
        """Gets the thin_capable of this Device.  # noqa: E501


        :return: The thin_capable of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._thin_capable

    @thin_capable.setter
    def thin_capable(self, thin_capable):
        """Sets the thin_capable of this Device.


        :param thin_capable: The thin_capable of this Device.  # noqa: E501
        :type: bool
        """

        self._thin_capable = thin_capable

    @property
    def top_level(self):
        """Gets the top_level of this Device.  # noqa: E501


        :return: The top_level of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._top_level

    @top_level.setter
    def top_level(self, top_level):
        """Sets the top_level of this Device.


        :param top_level: The top_level of this Device.  # noqa: E501
        :type: bool
        """

        self._top_level = top_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Device, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Device):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
