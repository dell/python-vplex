# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vplexapi.models.admin_state import AdminState  # noqa: F401,E501


class ClusterWitnessComponents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_state': 'AdminState',
        'diagnostic': 'str',
        'management_connectivity': 'str',
        'name': 'str',
        'operational_state': 'str'
    }

    attribute_map = {
        'admin_state': 'admin_state',
        'diagnostic': 'diagnostic',
        'management_connectivity': 'management_connectivity',
        'name': 'name',
        'operational_state': 'operational_state'
    }

    def __init__(self, admin_state=None, diagnostic=None, management_connectivity=None, name=None, operational_state=None):  # noqa: E501
        """ClusterWitnessComponents - a model defined in Swagger"""  # noqa: E501

        self._admin_state = None
        self._diagnostic = None
        self._management_connectivity = None
        self._name = None
        self._operational_state = None
        self.discriminator = None

        if admin_state is not None:
            self.admin_state = admin_state
        if diagnostic is not None:
            self.diagnostic = diagnostic
        if management_connectivity is not None:
            self.management_connectivity = management_connectivity
        if name is not None:
            self.name = name
        if operational_state is not None:
            self.operational_state = operational_state

    @property
    def admin_state(self):
        """Gets the admin_state of this ClusterWitnessComponents.  # noqa: E501


        :return: The admin_state of this ClusterWitnessComponents.  # noqa: E501
        :rtype: AdminState
        """
        return self._admin_state

    @admin_state.setter
    def admin_state(self, admin_state):
        """Sets the admin_state of this ClusterWitnessComponents.


        :param admin_state: The admin_state of this ClusterWitnessComponents.  # noqa: E501
        :type: AdminState
        """

        self._admin_state = admin_state

    @property
    def diagnostic(self):
        """Gets the diagnostic of this ClusterWitnessComponents.  # noqa: E501


        :return: The diagnostic of this ClusterWitnessComponents.  # noqa: E501
        :rtype: str
        """
        return self._diagnostic

    @diagnostic.setter
    def diagnostic(self, diagnostic):
        """Sets the diagnostic of this ClusterWitnessComponents.


        :param diagnostic: The diagnostic of this ClusterWitnessComponents.  # noqa: E501
        :type: str
        """

        self._diagnostic = diagnostic

    @property
    def management_connectivity(self):
        """Gets the management_connectivity of this ClusterWitnessComponents.  # noqa: E501


        :return: The management_connectivity of this ClusterWitnessComponents.  # noqa: E501
        :rtype: str
        """
        return self._management_connectivity

    @management_connectivity.setter
    def management_connectivity(self, management_connectivity):
        """Sets the management_connectivity of this ClusterWitnessComponents.


        :param management_connectivity: The management_connectivity of this ClusterWitnessComponents.  # noqa: E501
        :type: str
        """

        self._management_connectivity = management_connectivity

    @property
    def name(self):
        """Gets the name of this ClusterWitnessComponents.  # noqa: E501


        :return: The name of this ClusterWitnessComponents.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterWitnessComponents.


        :param name: The name of this ClusterWitnessComponents.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operational_state(self):
        """Gets the operational_state of this ClusterWitnessComponents.  # noqa: E501


        :return: The operational_state of this ClusterWitnessComponents.  # noqa: E501
        :rtype: str
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this ClusterWitnessComponents.


        :param operational_state: The operational_state of this ClusterWitnessComponents.  # noqa: E501
        :type: str
        """

        self._operational_state = operational_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterWitnessComponents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterWitnessComponents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
