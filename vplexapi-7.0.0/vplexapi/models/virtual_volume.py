# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VirtualVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'operational_status': 'str',
        'health_state': 'str',
        'service_status': 'str',
        'block_count': 'int',
        'block_size': 'int',
        'capacity': 'int',
        'supporting_device': 'str',
        'expandable': 'bool',
        'expandable_capacity': 'int',
        'consistency_group': 'str',
        'vpd_id': 'str',
        'thin_enabled': 'str',
        'expansion_method': 'str',
        'expansion_status': 'str',
        'health_indications': 'list[str]',
        'initialization_status': 'str',
        'storage_array_family': 'str',
        'system_id': 'str',
        'visibility': 'str',
        'locality': 'str'
    }

    attribute_map = {
        'name': 'name',
        'operational_status': 'operational_status',
        'health_state': 'health_state',
        'service_status': 'service_status',
        'block_count': 'block_count',
        'block_size': 'block_size',
        'capacity': 'capacity',
        'supporting_device': 'supporting_device',
        'expandable': 'expandable',
        'expandable_capacity': 'expandable_capacity',
        'consistency_group': 'consistency_group',
        'vpd_id': 'vpd_id',
        'thin_enabled': 'thin_enabled',
        'expansion_method': 'expansion_method',
        'expansion_status': 'expansion_status',
        'health_indications': 'health_indications',
        'initialization_status': 'initialization_status',
        'storage_array_family': 'storage_array_family',
        'system_id': 'system_id',
        'visibility': 'visibility',
        'locality': 'locality'
    }

    def __init__(self, name=None, operational_status=None, health_state=None, service_status=None, block_count=None, block_size=None, capacity=None, supporting_device=None, expandable=None, expandable_capacity=None, consistency_group=None, vpd_id=None, thin_enabled=None, expansion_method=None, expansion_status=None, health_indications=None, initialization_status=None, storage_array_family=None, system_id=None, visibility=None, locality=None):  # noqa: E501
        """VirtualVolume - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._operational_status = None
        self._health_state = None
        self._service_status = None
        self._block_count = None
        self._block_size = None
        self._capacity = None
        self._supporting_device = None
        self._expandable = None
        self._expandable_capacity = None
        self._consistency_group = None
        self._vpd_id = None
        self._thin_enabled = None
        self._expansion_method = None
        self._expansion_status = None
        self._health_indications = None
        self._initialization_status = None
        self._storage_array_family = None
        self._system_id = None
        self._visibility = None
        self._locality = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if operational_status is not None:
            self.operational_status = operational_status
        if health_state is not None:
            self.health_state = health_state
        if service_status is not None:
            self.service_status = service_status
        if block_count is not None:
            self.block_count = block_count
        if block_size is not None:
            self.block_size = block_size
        if capacity is not None:
            self.capacity = capacity
        if supporting_device is not None:
            self.supporting_device = supporting_device
        if expandable is not None:
            self.expandable = expandable
        if expandable_capacity is not None:
            self.expandable_capacity = expandable_capacity
        if consistency_group is not None:
            self.consistency_group = consistency_group
        if vpd_id is not None:
            self.vpd_id = vpd_id
        if thin_enabled is not None:
            self.thin_enabled = thin_enabled
        if expansion_method is not None:
            self.expansion_method = expansion_method
        if expansion_status is not None:
            self.expansion_status = expansion_status
        if health_indications is not None:
            self.health_indications = health_indications
        if initialization_status is not None:
            self.initialization_status = initialization_status
        if storage_array_family is not None:
            self.storage_array_family = storage_array_family
        if system_id is not None:
            self.system_id = system_id
        if visibility is not None:
            self.visibility = visibility
        if locality is not None:
            self.locality = locality

    @property
    def name(self):
        """Gets the name of this VirtualVolume.  # noqa: E501


        :return: The name of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualVolume.


        :param name: The name of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operational_status(self):
        """Gets the operational_status of this VirtualVolume.  # noqa: E501


        :return: The operational_status of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this VirtualVolume.


        :param operational_status: The operational_status of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._operational_status = operational_status

    @property
    def health_state(self):
        """Gets the health_state of this VirtualVolume.  # noqa: E501


        :return: The health_state of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this VirtualVolume.


        :param health_state: The health_state of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._health_state = health_state

    @property
    def service_status(self):
        """Gets the service_status of this VirtualVolume.  # noqa: E501


        :return: The service_status of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this VirtualVolume.


        :param service_status: The service_status of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._service_status = service_status

    @property
    def block_count(self):
        """Gets the block_count of this VirtualVolume.  # noqa: E501


        :return: The block_count of this VirtualVolume.  # noqa: E501
        :rtype: int
        """
        return self._block_count

    @block_count.setter
    def block_count(self, block_count):
        """Sets the block_count of this VirtualVolume.


        :param block_count: The block_count of this VirtualVolume.  # noqa: E501
        :type: int
        """

        self._block_count = block_count

    @property
    def block_size(self):
        """Gets the block_size of this VirtualVolume.  # noqa: E501


        :return: The block_size of this VirtualVolume.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this VirtualVolume.


        :param block_size: The block_size of this VirtualVolume.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def capacity(self):
        """Gets the capacity of this VirtualVolume.  # noqa: E501


        :return: The capacity of this VirtualVolume.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this VirtualVolume.


        :param capacity: The capacity of this VirtualVolume.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def supporting_device(self):
        """Gets the supporting_device of this VirtualVolume.  # noqa: E501


        :return: The supporting_device of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._supporting_device

    @supporting_device.setter
    def supporting_device(self, supporting_device):
        """Sets the supporting_device of this VirtualVolume.


        :param supporting_device: The supporting_device of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._supporting_device = supporting_device

    @property
    def expandable(self):
        """Gets the expandable of this VirtualVolume.  # noqa: E501


        :return: The expandable of this VirtualVolume.  # noqa: E501
        :rtype: bool
        """
        return self._expandable

    @expandable.setter
    def expandable(self, expandable):
        """Sets the expandable of this VirtualVolume.


        :param expandable: The expandable of this VirtualVolume.  # noqa: E501
        :type: bool
        """

        self._expandable = expandable

    @property
    def expandable_capacity(self):
        """Gets the expandable_capacity of this VirtualVolume.  # noqa: E501


        :return: The expandable_capacity of this VirtualVolume.  # noqa: E501
        :rtype: int
        """
        return self._expandable_capacity

    @expandable_capacity.setter
    def expandable_capacity(self, expandable_capacity):
        """Sets the expandable_capacity of this VirtualVolume.


        :param expandable_capacity: The expandable_capacity of this VirtualVolume.  # noqa: E501
        :type: int
        """

        self._expandable_capacity = expandable_capacity

    @property
    def consistency_group(self):
        """Gets the consistency_group of this VirtualVolume.  # noqa: E501


        :return: The consistency_group of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._consistency_group

    @consistency_group.setter
    def consistency_group(self, consistency_group):
        """Sets the consistency_group of this VirtualVolume.


        :param consistency_group: The consistency_group of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._consistency_group = consistency_group

    @property
    def vpd_id(self):
        """Gets the vpd_id of this VirtualVolume.  # noqa: E501


        :return: The vpd_id of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._vpd_id

    @vpd_id.setter
    def vpd_id(self, vpd_id):
        """Sets the vpd_id of this VirtualVolume.


        :param vpd_id: The vpd_id of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._vpd_id = vpd_id

    @property
    def thin_enabled(self):
        """Gets the thin_enabled of this VirtualVolume.  # noqa: E501


        :return: The thin_enabled of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._thin_enabled

    @thin_enabled.setter
    def thin_enabled(self, thin_enabled):
        """Sets the thin_enabled of this VirtualVolume.


        :param thin_enabled: The thin_enabled of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._thin_enabled = thin_enabled

    @property
    def expansion_method(self):
        """Gets the expansion_method of this VirtualVolume.  # noqa: E501


        :return: The expansion_method of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._expansion_method

    @expansion_method.setter
    def expansion_method(self, expansion_method):
        """Sets the expansion_method of this VirtualVolume.


        :param expansion_method: The expansion_method of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._expansion_method = expansion_method

    @property
    def expansion_status(self):
        """Gets the expansion_status of this VirtualVolume.  # noqa: E501


        :return: The expansion_status of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._expansion_status

    @expansion_status.setter
    def expansion_status(self, expansion_status):
        """Sets the expansion_status of this VirtualVolume.


        :param expansion_status: The expansion_status of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._expansion_status = expansion_status

    @property
    def health_indications(self):
        """Gets the health_indications of this VirtualVolume.  # noqa: E501


        :return: The health_indications of this VirtualVolume.  # noqa: E501
        :rtype: list[str]
        """
        return self._health_indications

    @health_indications.setter
    def health_indications(self, health_indications):
        """Sets the health_indications of this VirtualVolume.


        :param health_indications: The health_indications of this VirtualVolume.  # noqa: E501
        :type: list[str]
        """

        self._health_indications = health_indications

    @property
    def initialization_status(self):
        """Gets the initialization_status of this VirtualVolume.  # noqa: E501


        :return: The initialization_status of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._initialization_status

    @initialization_status.setter
    def initialization_status(self, initialization_status):
        """Sets the initialization_status of this VirtualVolume.


        :param initialization_status: The initialization_status of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._initialization_status = initialization_status

    @property
    def storage_array_family(self):
        """Gets the storage_array_family of this VirtualVolume.  # noqa: E501


        :return: The storage_array_family of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._storage_array_family

    @storage_array_family.setter
    def storage_array_family(self, storage_array_family):
        """Sets the storage_array_family of this VirtualVolume.


        :param storage_array_family: The storage_array_family of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._storage_array_family = storage_array_family

    @property
    def system_id(self):
        """Gets the system_id of this VirtualVolume.  # noqa: E501


        :return: The system_id of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this VirtualVolume.


        :param system_id: The system_id of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def visibility(self):
        """Gets the visibility of this VirtualVolume.  # noqa: E501


        :return: The visibility of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this VirtualVolume.


        :param visibility: The visibility of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    @property
    def locality(self):
        """Gets the locality of this VirtualVolume.  # noqa: E501


        :return: The locality of this VirtualVolume.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this VirtualVolume.


        :param locality: The locality of this VirtualVolume.  # noqa: E501
        :type: str
        """

        self._locality = locality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualVolume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualVolume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
