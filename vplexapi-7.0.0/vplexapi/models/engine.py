# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Engine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_ip_seed': 'str',
        'enclosure_id': 'str',
        'engine_id': 'str',
        'engine_family': 'str',
        'health_indications': 'list[str]',
        'health_state': 'str',
        'marker_led': 'str',
        'operational_status': 'str',
        'part_number': 'str',
        'revision_number': 'str',
        'serial_number': 'str',
        'top_level_assembly': 'str',
        'wwn_seed': 'str',
        'name': 'str'
    }

    attribute_map = {
        'cluster_ip_seed': 'cluster_ip_seed',
        'enclosure_id': 'enclosure_id',
        'engine_id': 'engine_id',
        'engine_family': 'engine_family',
        'health_indications': 'health_indications',
        'health_state': 'health_state',
        'marker_led': 'marker_led',
        'operational_status': 'operational_status',
        'part_number': 'part_number',
        'revision_number': 'revision_number',
        'serial_number': 'serial_number',
        'top_level_assembly': 'top_level_assembly',
        'wwn_seed': 'wwn_seed',
        'name': 'name'
    }

    def __init__(self, cluster_ip_seed=None, enclosure_id=None, engine_id=None, engine_family=None, health_indications=None, health_state=None, marker_led=None, operational_status=None, part_number=None, revision_number=None, serial_number=None, top_level_assembly=None, wwn_seed=None, name=None):  # noqa: E501
        """Engine - a model defined in Swagger"""  # noqa: E501

        self._cluster_ip_seed = None
        self._enclosure_id = None
        self._engine_id = None
        self._engine_family = None
        self._health_indications = None
        self._health_state = None
        self._marker_led = None
        self._operational_status = None
        self._part_number = None
        self._revision_number = None
        self._serial_number = None
        self._top_level_assembly = None
        self._wwn_seed = None
        self._name = None
        self.discriminator = None

        if cluster_ip_seed is not None:
            self.cluster_ip_seed = cluster_ip_seed
        if enclosure_id is not None:
            self.enclosure_id = enclosure_id
        if engine_id is not None:
            self.engine_id = engine_id
        if engine_family is not None:
            self.engine_family = engine_family
        if health_indications is not None:
            self.health_indications = health_indications
        if health_state is not None:
            self.health_state = health_state
        if marker_led is not None:
            self.marker_led = marker_led
        if operational_status is not None:
            self.operational_status = operational_status
        if part_number is not None:
            self.part_number = part_number
        if revision_number is not None:
            self.revision_number = revision_number
        if serial_number is not None:
            self.serial_number = serial_number
        if top_level_assembly is not None:
            self.top_level_assembly = top_level_assembly
        if wwn_seed is not None:
            self.wwn_seed = wwn_seed
        if name is not None:
            self.name = name

    @property
    def cluster_ip_seed(self):
        """Gets the cluster_ip_seed of this Engine.  # noqa: E501


        :return: The cluster_ip_seed of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._cluster_ip_seed

    @cluster_ip_seed.setter
    def cluster_ip_seed(self, cluster_ip_seed):
        """Sets the cluster_ip_seed of this Engine.


        :param cluster_ip_seed: The cluster_ip_seed of this Engine.  # noqa: E501
        :type: str
        """

        self._cluster_ip_seed = cluster_ip_seed

    @property
    def enclosure_id(self):
        """Gets the enclosure_id of this Engine.  # noqa: E501


        :return: The enclosure_id of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_id

    @enclosure_id.setter
    def enclosure_id(self, enclosure_id):
        """Sets the enclosure_id of this Engine.


        :param enclosure_id: The enclosure_id of this Engine.  # noqa: E501
        :type: str
        """

        self._enclosure_id = enclosure_id

    @property
    def engine_id(self):
        """Gets the engine_id of this Engine.  # noqa: E501


        :return: The engine_id of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._engine_id

    @engine_id.setter
    def engine_id(self, engine_id):
        """Sets the engine_id of this Engine.


        :param engine_id: The engine_id of this Engine.  # noqa: E501
        :type: str
        """

        self._engine_id = engine_id

    @property
    def engine_family(self):
        """Gets the engine_family of this Engine.  # noqa: E501


        :return: The engine_family of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._engine_family

    @engine_family.setter
    def engine_family(self, engine_family):
        """Sets the engine_family of this Engine.


        :param engine_family: The engine_family of this Engine.  # noqa: E501
        :type: str
        """

        self._engine_family = engine_family

    @property
    def health_indications(self):
        """Gets the health_indications of this Engine.  # noqa: E501


        :return: The health_indications of this Engine.  # noqa: E501
        :rtype: list[str]
        """
        return self._health_indications

    @health_indications.setter
    def health_indications(self, health_indications):
        """Sets the health_indications of this Engine.


        :param health_indications: The health_indications of this Engine.  # noqa: E501
        :type: list[str]
        """

        self._health_indications = health_indications

    @property
    def health_state(self):
        """Gets the health_state of this Engine.  # noqa: E501


        :return: The health_state of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this Engine.


        :param health_state: The health_state of this Engine.  # noqa: E501
        :type: str
        """

        self._health_state = health_state

    @property
    def marker_led(self):
        """Gets the marker_led of this Engine.  # noqa: E501


        :return: The marker_led of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._marker_led

    @marker_led.setter
    def marker_led(self, marker_led):
        """Sets the marker_led of this Engine.


        :param marker_led: The marker_led of this Engine.  # noqa: E501
        :type: str
        """

        self._marker_led = marker_led

    @property
    def operational_status(self):
        """Gets the operational_status of this Engine.  # noqa: E501


        :return: The operational_status of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this Engine.


        :param operational_status: The operational_status of this Engine.  # noqa: E501
        :type: str
        """

        self._operational_status = operational_status

    @property
    def part_number(self):
        """Gets the part_number of this Engine.  # noqa: E501


        :return: The part_number of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this Engine.


        :param part_number: The part_number of this Engine.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def revision_number(self):
        """Gets the revision_number of this Engine.  # noqa: E501


        :return: The revision_number of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._revision_number

    @revision_number.setter
    def revision_number(self, revision_number):
        """Sets the revision_number of this Engine.


        :param revision_number: The revision_number of this Engine.  # noqa: E501
        :type: str
        """

        self._revision_number = revision_number

    @property
    def serial_number(self):
        """Gets the serial_number of this Engine.  # noqa: E501


        :return: The serial_number of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Engine.


        :param serial_number: The serial_number of this Engine.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def top_level_assembly(self):
        """Gets the top_level_assembly of this Engine.  # noqa: E501


        :return: The top_level_assembly of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._top_level_assembly

    @top_level_assembly.setter
    def top_level_assembly(self, top_level_assembly):
        """Sets the top_level_assembly of this Engine.


        :param top_level_assembly: The top_level_assembly of this Engine.  # noqa: E501
        :type: str
        """

        self._top_level_assembly = top_level_assembly

    @property
    def wwn_seed(self):
        """Gets the wwn_seed of this Engine.  # noqa: E501


        :return: The wwn_seed of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._wwn_seed

    @wwn_seed.setter
    def wwn_seed(self, wwn_seed):
        """Sets the wwn_seed of this Engine.


        :param wwn_seed: The wwn_seed of this Engine.  # noqa: E501
        :type: str
        """

        self._wwn_seed = wwn_seed

    @property
    def name(self):
        """Gets the name of this Engine.  # noqa: E501


        :return: The name of this Engine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Engine.


        :param name: The name of this Engine.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Engine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Engine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
