# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vplexapi.models.storage_array_family import StorageArrayFamily  # noqa: F401,E501


class DistributedDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity': 'int',
        'geometry': 'str',
        'health_indications': 'list[str]',
        'health_state': 'str',
        'name': 'str',
        'operational_status': 'str',
        'rule_set_name': 'str',
        'service_status': 'str',
        'storage_array_family': 'StorageArrayFamily',
        'thin_capable': 'bool',
        'virtual_volume': 'str',
        'rebuild_allowed': 'bool',
        'rebuild_eta': 'int',
        'rebuild_progress': 'int',
        'rebuild_status': 'str',
        'rebuild_type': 'str'
    }

    attribute_map = {
        'capacity': 'capacity',
        'geometry': 'geometry',
        'health_indications': 'health_indications',
        'health_state': 'health_state',
        'name': 'name',
        'operational_status': 'operational_status',
        'rule_set_name': 'rule_set_name',
        'service_status': 'service_status',
        'storage_array_family': 'storage_array_family',
        'thin_capable': 'thin_capable',
        'virtual_volume': 'virtual_volume',
        'rebuild_allowed': 'rebuild_allowed',
        'rebuild_eta': 'rebuild_eta',
        'rebuild_progress': 'rebuild_progress',
        'rebuild_status': 'rebuild_status',
        'rebuild_type': 'rebuild_type'
    }

    def __init__(self, capacity=None, geometry=None, health_indications=None, health_state=None, name=None, operational_status=None, rule_set_name=None, service_status=None, storage_array_family=None, thin_capable=None, virtual_volume=None, rebuild_allowed=None, rebuild_eta=None, rebuild_progress=None, rebuild_status=None, rebuild_type=None):  # noqa: E501
        """DistributedDevice - a model defined in Swagger"""  # noqa: E501

        self._capacity = None
        self._geometry = None
        self._health_indications = None
        self._health_state = None
        self._name = None
        self._operational_status = None
        self._rule_set_name = None
        self._service_status = None
        self._storage_array_family = None
        self._thin_capable = None
        self._virtual_volume = None
        self._rebuild_allowed = None
        self._rebuild_eta = None
        self._rebuild_progress = None
        self._rebuild_status = None
        self._rebuild_type = None
        self.discriminator = None

        if capacity is not None:
            self.capacity = capacity
        if geometry is not None:
            self.geometry = geometry
        if health_indications is not None:
            self.health_indications = health_indications
        if health_state is not None:
            self.health_state = health_state
        if name is not None:
            self.name = name
        if operational_status is not None:
            self.operational_status = operational_status
        if rule_set_name is not None:
            self.rule_set_name = rule_set_name
        if service_status is not None:
            self.service_status = service_status
        if storage_array_family is not None:
            self.storage_array_family = storage_array_family
        if thin_capable is not None:
            self.thin_capable = thin_capable
        if virtual_volume is not None:
            self.virtual_volume = virtual_volume
        if rebuild_allowed is not None:
            self.rebuild_allowed = rebuild_allowed
        if rebuild_eta is not None:
            self.rebuild_eta = rebuild_eta
        if rebuild_progress is not None:
            self.rebuild_progress = rebuild_progress
        if rebuild_status is not None:
            self.rebuild_status = rebuild_status
        if rebuild_type is not None:
            self.rebuild_type = rebuild_type

    @property
    def capacity(self):
        """Gets the capacity of this DistributedDevice.  # noqa: E501


        :return: The capacity of this DistributedDevice.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this DistributedDevice.


        :param capacity: The capacity of this DistributedDevice.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def geometry(self):
        """Gets the geometry of this DistributedDevice.  # noqa: E501


        :return: The geometry of this DistributedDevice.  # noqa: E501
        :rtype: str
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this DistributedDevice.


        :param geometry: The geometry of this DistributedDevice.  # noqa: E501
        :type: str
        """

        self._geometry = geometry

    @property
    def health_indications(self):
        """Gets the health_indications of this DistributedDevice.  # noqa: E501


        :return: The health_indications of this DistributedDevice.  # noqa: E501
        :rtype: list[str]
        """
        return self._health_indications

    @health_indications.setter
    def health_indications(self, health_indications):
        """Sets the health_indications of this DistributedDevice.


        :param health_indications: The health_indications of this DistributedDevice.  # noqa: E501
        :type: list[str]
        """

        self._health_indications = health_indications

    @property
    def health_state(self):
        """Gets the health_state of this DistributedDevice.  # noqa: E501


        :return: The health_state of this DistributedDevice.  # noqa: E501
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this DistributedDevice.


        :param health_state: The health_state of this DistributedDevice.  # noqa: E501
        :type: str
        """

        self._health_state = health_state

    @property
    def name(self):
        """Gets the name of this DistributedDevice.  # noqa: E501


        :return: The name of this DistributedDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DistributedDevice.


        :param name: The name of this DistributedDevice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operational_status(self):
        """Gets the operational_status of this DistributedDevice.  # noqa: E501


        :return: The operational_status of this DistributedDevice.  # noqa: E501
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this DistributedDevice.


        :param operational_status: The operational_status of this DistributedDevice.  # noqa: E501
        :type: str
        """

        self._operational_status = operational_status

    @property
    def rule_set_name(self):
        """Gets the rule_set_name of this DistributedDevice.  # noqa: E501


        :return: The rule_set_name of this DistributedDevice.  # noqa: E501
        :rtype: str
        """
        return self._rule_set_name

    @rule_set_name.setter
    def rule_set_name(self, rule_set_name):
        """Sets the rule_set_name of this DistributedDevice.


        :param rule_set_name: The rule_set_name of this DistributedDevice.  # noqa: E501
        :type: str
        """

        self._rule_set_name = rule_set_name

    @property
    def service_status(self):
        """Gets the service_status of this DistributedDevice.  # noqa: E501


        :return: The service_status of this DistributedDevice.  # noqa: E501
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this DistributedDevice.


        :param service_status: The service_status of this DistributedDevice.  # noqa: E501
        :type: str
        """

        self._service_status = service_status

    @property
    def storage_array_family(self):
        """Gets the storage_array_family of this DistributedDevice.  # noqa: E501


        :return: The storage_array_family of this DistributedDevice.  # noqa: E501
        :rtype: StorageArrayFamily
        """
        return self._storage_array_family

    @storage_array_family.setter
    def storage_array_family(self, storage_array_family):
        """Sets the storage_array_family of this DistributedDevice.


        :param storage_array_family: The storage_array_family of this DistributedDevice.  # noqa: E501
        :type: StorageArrayFamily
        """

        self._storage_array_family = storage_array_family

    @property
    def thin_capable(self):
        """Gets the thin_capable of this DistributedDevice.  # noqa: E501


        :return: The thin_capable of this DistributedDevice.  # noqa: E501
        :rtype: bool
        """
        return self._thin_capable

    @thin_capable.setter
    def thin_capable(self, thin_capable):
        """Sets the thin_capable of this DistributedDevice.


        :param thin_capable: The thin_capable of this DistributedDevice.  # noqa: E501
        :type: bool
        """

        self._thin_capable = thin_capable

    @property
    def virtual_volume(self):
        """Gets the virtual_volume of this DistributedDevice.  # noqa: E501


        :return: The virtual_volume of this DistributedDevice.  # noqa: E501
        :rtype: str
        """
        return self._virtual_volume

    @virtual_volume.setter
    def virtual_volume(self, virtual_volume):
        """Sets the virtual_volume of this DistributedDevice.


        :param virtual_volume: The virtual_volume of this DistributedDevice.  # noqa: E501
        :type: str
        """

        self._virtual_volume = virtual_volume

    @property
    def rebuild_allowed(self):
        """Gets the rebuild_allowed of this DistributedDevice.  # noqa: E501


        :return: The rebuild_allowed of this DistributedDevice.  # noqa: E501
        :rtype: bool
        """
        return self._rebuild_allowed

    @rebuild_allowed.setter
    def rebuild_allowed(self, rebuild_allowed):
        """Sets the rebuild_allowed of this DistributedDevice.


        :param rebuild_allowed: The rebuild_allowed of this DistributedDevice.  # noqa: E501
        :type: bool
        """

        self._rebuild_allowed = rebuild_allowed

    @property
    def rebuild_eta(self):
        """Gets the rebuild_eta of this DistributedDevice.  # noqa: E501


        :return: The rebuild_eta of this DistributedDevice.  # noqa: E501
        :rtype: int
        """
        return self._rebuild_eta

    @rebuild_eta.setter
    def rebuild_eta(self, rebuild_eta):
        """Sets the rebuild_eta of this DistributedDevice.


        :param rebuild_eta: The rebuild_eta of this DistributedDevice.  # noqa: E501
        :type: int
        """

        self._rebuild_eta = rebuild_eta

    @property
    def rebuild_progress(self):
        """Gets the rebuild_progress of this DistributedDevice.  # noqa: E501


        :return: The rebuild_progress of this DistributedDevice.  # noqa: E501
        :rtype: int
        """
        return self._rebuild_progress

    @rebuild_progress.setter
    def rebuild_progress(self, rebuild_progress):
        """Sets the rebuild_progress of this DistributedDevice.


        :param rebuild_progress: The rebuild_progress of this DistributedDevice.  # noqa: E501
        :type: int
        """

        self._rebuild_progress = rebuild_progress

    @property
    def rebuild_status(self):
        """Gets the rebuild_status of this DistributedDevice.  # noqa: E501


        :return: The rebuild_status of this DistributedDevice.  # noqa: E501
        :rtype: str
        """
        return self._rebuild_status

    @rebuild_status.setter
    def rebuild_status(self, rebuild_status):
        """Sets the rebuild_status of this DistributedDevice.


        :param rebuild_status: The rebuild_status of this DistributedDevice.  # noqa: E501
        :type: str
        """

        self._rebuild_status = rebuild_status

    @property
    def rebuild_type(self):
        """Gets the rebuild_type of this DistributedDevice.  # noqa: E501


        :return: The rebuild_type of this DistributedDevice.  # noqa: E501
        :rtype: str
        """
        return self._rebuild_type

    @rebuild_type.setter
    def rebuild_type(self, rebuild_type):
        """Sets the rebuild_type of this DistributedDevice.


        :param rebuild_type: The rebuild_type of this DistributedDevice.  # noqa: E501
        :type: str
        """

        self._rebuild_type = rebuild_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DistributedDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistributedDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
