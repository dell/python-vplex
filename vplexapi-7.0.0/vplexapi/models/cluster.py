# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Cluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'cluster_id': 'int',
        'island_id': 'int',
        'allow_auto_join': 'bool',
        'connected': 'bool',
        'top_level_assembly': 'str',
        'operational_status': 'str',
        'transition_indications': 'list[str]',
        'transition_progress': 'list[str]',
        'health_state': 'str',
        'health_indications': 'list[str]',
        'system_time': 'str',
        'ip_address': 'str',
        'directors': 'list[str]',
        'is_local': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'cluster_id': 'cluster_id',
        'island_id': 'island_id',
        'allow_auto_join': 'allow_auto_join',
        'connected': 'connected',
        'top_level_assembly': 'top_level_assembly',
        'operational_status': 'operational_status',
        'transition_indications': 'transition_indications',
        'transition_progress': 'transition_progress',
        'health_state': 'health_state',
        'health_indications': 'health_indications',
        'system_time': 'system_time',
        'ip_address': 'ip_address',
        'directors': 'directors',
        'is_local': 'is_local'
    }

    def __init__(self, name=None, cluster_id=None, island_id=None, allow_auto_join=None, connected=None, top_level_assembly=None, operational_status=None, transition_indications=None, transition_progress=None, health_state=None, health_indications=None, system_time=None, ip_address=None, directors=None, is_local=None):  # noqa: E501
        """Cluster - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._cluster_id = None
        self._island_id = None
        self._allow_auto_join = None
        self._connected = None
        self._top_level_assembly = None
        self._operational_status = None
        self._transition_indications = None
        self._transition_progress = None
        self._health_state = None
        self._health_indications = None
        self._system_time = None
        self._ip_address = None
        self._directors = None
        self._is_local = None
        self.discriminator = None

        self.name = name
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if island_id is not None:
            self.island_id = island_id
        if allow_auto_join is not None:
            self.allow_auto_join = allow_auto_join
        if connected is not None:
            self.connected = connected
        if top_level_assembly is not None:
            self.top_level_assembly = top_level_assembly
        if operational_status is not None:
            self.operational_status = operational_status
        if transition_indications is not None:
            self.transition_indications = transition_indications
        if transition_progress is not None:
            self.transition_progress = transition_progress
        if health_state is not None:
            self.health_state = health_state
        if health_indications is not None:
            self.health_indications = health_indications
        if system_time is not None:
            self.system_time = system_time
        if ip_address is not None:
            self.ip_address = ip_address
        if directors is not None:
            self.directors = directors
        if is_local is not None:
            self.is_local = is_local

    @property
    def name(self):
        """Gets the name of this Cluster.  # noqa: E501


        :return: The name of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.


        :param name: The name of this Cluster.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Cluster.  # noqa: E501


        :return: The cluster_id of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Cluster.


        :param cluster_id: The cluster_id of this Cluster.  # noqa: E501
        :type: int
        """

        self._cluster_id = cluster_id

    @property
    def island_id(self):
        """Gets the island_id of this Cluster.  # noqa: E501


        :return: The island_id of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._island_id

    @island_id.setter
    def island_id(self, island_id):
        """Sets the island_id of this Cluster.


        :param island_id: The island_id of this Cluster.  # noqa: E501
        :type: int
        """

        self._island_id = island_id

    @property
    def allow_auto_join(self):
        """Gets the allow_auto_join of this Cluster.  # noqa: E501


        :return: The allow_auto_join of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._allow_auto_join

    @allow_auto_join.setter
    def allow_auto_join(self, allow_auto_join):
        """Sets the allow_auto_join of this Cluster.


        :param allow_auto_join: The allow_auto_join of this Cluster.  # noqa: E501
        :type: bool
        """

        self._allow_auto_join = allow_auto_join

    @property
    def connected(self):
        """Gets the connected of this Cluster.  # noqa: E501


        :return: The connected of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this Cluster.


        :param connected: The connected of this Cluster.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def top_level_assembly(self):
        """Gets the top_level_assembly of this Cluster.  # noqa: E501


        :return: The top_level_assembly of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._top_level_assembly

    @top_level_assembly.setter
    def top_level_assembly(self, top_level_assembly):
        """Sets the top_level_assembly of this Cluster.


        :param top_level_assembly: The top_level_assembly of this Cluster.  # noqa: E501
        :type: str
        """

        self._top_level_assembly = top_level_assembly

    @property
    def operational_status(self):
        """Gets the operational_status of this Cluster.  # noqa: E501


        :return: The operational_status of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this Cluster.


        :param operational_status: The operational_status of this Cluster.  # noqa: E501
        :type: str
        """

        self._operational_status = operational_status

    @property
    def transition_indications(self):
        """Gets the transition_indications of this Cluster.  # noqa: E501


        :return: The transition_indications of this Cluster.  # noqa: E501
        :rtype: list[str]
        """
        return self._transition_indications

    @transition_indications.setter
    def transition_indications(self, transition_indications):
        """Sets the transition_indications of this Cluster.


        :param transition_indications: The transition_indications of this Cluster.  # noqa: E501
        :type: list[str]
        """

        self._transition_indications = transition_indications

    @property
    def transition_progress(self):
        """Gets the transition_progress of this Cluster.  # noqa: E501


        :return: The transition_progress of this Cluster.  # noqa: E501
        :rtype: list[str]
        """
        return self._transition_progress

    @transition_progress.setter
    def transition_progress(self, transition_progress):
        """Sets the transition_progress of this Cluster.


        :param transition_progress: The transition_progress of this Cluster.  # noqa: E501
        :type: list[str]
        """

        self._transition_progress = transition_progress

    @property
    def health_state(self):
        """Gets the health_state of this Cluster.  # noqa: E501


        :return: The health_state of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this Cluster.


        :param health_state: The health_state of this Cluster.  # noqa: E501
        :type: str
        """

        self._health_state = health_state

    @property
    def health_indications(self):
        """Gets the health_indications of this Cluster.  # noqa: E501


        :return: The health_indications of this Cluster.  # noqa: E501
        :rtype: list[str]
        """
        return self._health_indications

    @health_indications.setter
    def health_indications(self, health_indications):
        """Sets the health_indications of this Cluster.


        :param health_indications: The health_indications of this Cluster.  # noqa: E501
        :type: list[str]
        """

        self._health_indications = health_indications

    @property
    def system_time(self):
        """Gets the system_time of this Cluster.  # noqa: E501


        :return: The system_time of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._system_time

    @system_time.setter
    def system_time(self, system_time):
        """Sets the system_time of this Cluster.


        :param system_time: The system_time of this Cluster.  # noqa: E501
        :type: str
        """

        self._system_time = system_time

    @property
    def ip_address(self):
        """Gets the ip_address of this Cluster.  # noqa: E501


        :return: The ip_address of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Cluster.


        :param ip_address: The ip_address of this Cluster.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def directors(self):
        """Gets the directors of this Cluster.  # noqa: E501


        :return: The directors of this Cluster.  # noqa: E501
        :rtype: list[str]
        """
        return self._directors

    @directors.setter
    def directors(self, directors):
        """Sets the directors of this Cluster.


        :param directors: The directors of this Cluster.  # noqa: E501
        :type: list[str]
        """

        self._directors = directors

    @property
    def is_local(self):
        """Gets the is_local of this Cluster.  # noqa: E501


        :return: The is_local of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this Cluster.


        :param is_local: The is_local of this Cluster.  # noqa: E501
        :type: bool
        """

        self._is_local = is_local

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
