# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vplexapi.models.storage_view_virtual_volumes import StorageViewVirtualVolumes  # noqa: F401,E501


class StorageView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'operational_status': 'str',
        'initiators': 'list[str]',
        'virtual_volumes': 'list[StorageViewVirtualVolumes]',
        'ports': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'operational_status': 'operational_status',
        'initiators': 'initiators',
        'virtual_volumes': 'virtual_volumes',
        'ports': 'ports'
    }

    def __init__(self, name=None, operational_status=None, initiators=None, virtual_volumes=None, ports=None):  # noqa: E501
        """StorageView - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._operational_status = None
        self._initiators = None
        self._virtual_volumes = None
        self._ports = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if operational_status is not None:
            self.operational_status = operational_status
        if initiators is not None:
            self.initiators = initiators
        if virtual_volumes is not None:
            self.virtual_volumes = virtual_volumes
        if ports is not None:
            self.ports = ports

    @property
    def name(self):
        """Gets the name of this StorageView.  # noqa: E501


        :return: The name of this StorageView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageView.


        :param name: The name of this StorageView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operational_status(self):
        """Gets the operational_status of this StorageView.  # noqa: E501


        :return: The operational_status of this StorageView.  # noqa: E501
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this StorageView.


        :param operational_status: The operational_status of this StorageView.  # noqa: E501
        :type: str
        """

        self._operational_status = operational_status

    @property
    def initiators(self):
        """Gets the initiators of this StorageView.  # noqa: E501


        :return: The initiators of this StorageView.  # noqa: E501
        :rtype: list[str]
        """
        return self._initiators

    @initiators.setter
    def initiators(self, initiators):
        """Sets the initiators of this StorageView.


        :param initiators: The initiators of this StorageView.  # noqa: E501
        :type: list[str]
        """

        self._initiators = initiators

    @property
    def virtual_volumes(self):
        """Gets the virtual_volumes of this StorageView.  # noqa: E501


        :return: The virtual_volumes of this StorageView.  # noqa: E501
        :rtype: list[StorageViewVirtualVolumes]
        """
        return self._virtual_volumes

    @virtual_volumes.setter
    def virtual_volumes(self, virtual_volumes):
        """Sets the virtual_volumes of this StorageView.


        :param virtual_volumes: The virtual_volumes of this StorageView.  # noqa: E501
        :type: list[StorageViewVirtualVolumes]
        """

        self._virtual_volumes = virtual_volumes

    @property
    def ports(self):
        """Gets the ports of this StorageView.  # noqa: E501


        :return: The ports of this StorageView.  # noqa: E501
        :rtype: list[str]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this StorageView.


        :param ports: The ports of this StorageView.  # noqa: E501
        :type: list[str]
        """

        self._ports = ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
