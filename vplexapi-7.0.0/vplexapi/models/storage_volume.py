# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vplexapi.models.storage_array_family import StorageArrayFamily  # noqa: F401,E501
from vplexapi.models.storage_volume_itls import StorageVolumeItls  # noqa: F401,E501


class StorageVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_consistent': 'bool',
        'block_count': 'int',
        'block_size': 'int',
        'capacity': 'int',
        'health_indications': 'list[str]',
        'health_state': 'str',
        'name': 'str',
        'operational_status': 'str',
        'io_status': 'str',
        'itls': 'list[StorageVolumeItls]',
        'largest_free_chunk': 'int',
        'provision_type': 'str',
        'storage_array_family': 'StorageArrayFamily',
        'storage_array_name': 'str',
        'storage_volumetype': 'str',
        'system_id': 'str',
        'thin_capable': 'bool',
        'thin_rebuild': 'bool',
        'use': 'str',
        'used_by': 'list[str]',
        'vendor_specific_name': 'str'
    }

    attribute_map = {
        'application_consistent': 'application_consistent',
        'block_count': 'block_count',
        'block_size': 'block_size',
        'capacity': 'capacity',
        'health_indications': 'health_indications',
        'health_state': 'health_state',
        'name': 'name',
        'operational_status': 'operational_status',
        'io_status': 'io_status',
        'itls': 'itls',
        'largest_free_chunk': 'largest_free_chunk',
        'provision_type': 'provision_type',
        'storage_array_family': 'storage_array_family',
        'storage_array_name': 'storage_array_name',
        'storage_volumetype': 'storage_volumetype',
        'system_id': 'system_id',
        'thin_capable': 'thin_capable',
        'thin_rebuild': 'thin_rebuild',
        'use': 'use',
        'used_by': 'used_by',
        'vendor_specific_name': 'vendor_specific_name'
    }

    def __init__(self, application_consistent=None, block_count=None, block_size=None, capacity=None, health_indications=None, health_state=None, name=None, operational_status=None, io_status=None, itls=None, largest_free_chunk=None, provision_type=None, storage_array_family=None, storage_array_name=None, storage_volumetype=None, system_id=None, thin_capable=None, thin_rebuild=None, use=None, used_by=None, vendor_specific_name=None):  # noqa: E501
        """StorageVolume - a model defined in Swagger"""  # noqa: E501

        self._application_consistent = None
        self._block_count = None
        self._block_size = None
        self._capacity = None
        self._health_indications = None
        self._health_state = None
        self._name = None
        self._operational_status = None
        self._io_status = None
        self._itls = None
        self._largest_free_chunk = None
        self._provision_type = None
        self._storage_array_family = None
        self._storage_array_name = None
        self._storage_volumetype = None
        self._system_id = None
        self._thin_capable = None
        self._thin_rebuild = None
        self._use = None
        self._used_by = None
        self._vendor_specific_name = None
        self.discriminator = None

        if application_consistent is not None:
            self.application_consistent = application_consistent
        if block_count is not None:
            self.block_count = block_count
        if block_size is not None:
            self.block_size = block_size
        if capacity is not None:
            self.capacity = capacity
        if health_indications is not None:
            self.health_indications = health_indications
        if health_state is not None:
            self.health_state = health_state
        if name is not None:
            self.name = name
        if operational_status is not None:
            self.operational_status = operational_status
        if io_status is not None:
            self.io_status = io_status
        if itls is not None:
            self.itls = itls
        if largest_free_chunk is not None:
            self.largest_free_chunk = largest_free_chunk
        if provision_type is not None:
            self.provision_type = provision_type
        if storage_array_family is not None:
            self.storage_array_family = storage_array_family
        if storage_array_name is not None:
            self.storage_array_name = storage_array_name
        if storage_volumetype is not None:
            self.storage_volumetype = storage_volumetype
        if system_id is not None:
            self.system_id = system_id
        if thin_capable is not None:
            self.thin_capable = thin_capable
        if thin_rebuild is not None:
            self.thin_rebuild = thin_rebuild
        if use is not None:
            self.use = use
        if used_by is not None:
            self.used_by = used_by
        if vendor_specific_name is not None:
            self.vendor_specific_name = vendor_specific_name

    @property
    def application_consistent(self):
        """Gets the application_consistent of this StorageVolume.  # noqa: E501


        :return: The application_consistent of this StorageVolume.  # noqa: E501
        :rtype: bool
        """
        return self._application_consistent

    @application_consistent.setter
    def application_consistent(self, application_consistent):
        """Sets the application_consistent of this StorageVolume.


        :param application_consistent: The application_consistent of this StorageVolume.  # noqa: E501
        :type: bool
        """

        self._application_consistent = application_consistent

    @property
    def block_count(self):
        """Gets the block_count of this StorageVolume.  # noqa: E501


        :return: The block_count of this StorageVolume.  # noqa: E501
        :rtype: int
        """
        return self._block_count

    @block_count.setter
    def block_count(self, block_count):
        """Sets the block_count of this StorageVolume.


        :param block_count: The block_count of this StorageVolume.  # noqa: E501
        :type: int
        """

        self._block_count = block_count

    @property
    def block_size(self):
        """Gets the block_size of this StorageVolume.  # noqa: E501


        :return: The block_size of this StorageVolume.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this StorageVolume.


        :param block_size: The block_size of this StorageVolume.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def capacity(self):
        """Gets the capacity of this StorageVolume.  # noqa: E501


        :return: The capacity of this StorageVolume.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this StorageVolume.


        :param capacity: The capacity of this StorageVolume.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def health_indications(self):
        """Gets the health_indications of this StorageVolume.  # noqa: E501


        :return: The health_indications of this StorageVolume.  # noqa: E501
        :rtype: list[str]
        """
        return self._health_indications

    @health_indications.setter
    def health_indications(self, health_indications):
        """Sets the health_indications of this StorageVolume.


        :param health_indications: The health_indications of this StorageVolume.  # noqa: E501
        :type: list[str]
        """

        self._health_indications = health_indications

    @property
    def health_state(self):
        """Gets the health_state of this StorageVolume.  # noqa: E501


        :return: The health_state of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this StorageVolume.


        :param health_state: The health_state of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._health_state = health_state

    @property
    def name(self):
        """Gets the name of this StorageVolume.  # noqa: E501


        :return: The name of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageVolume.


        :param name: The name of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operational_status(self):
        """Gets the operational_status of this StorageVolume.  # noqa: E501


        :return: The operational_status of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this StorageVolume.


        :param operational_status: The operational_status of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._operational_status = operational_status

    @property
    def io_status(self):
        """Gets the io_status of this StorageVolume.  # noqa: E501


        :return: The io_status of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._io_status

    @io_status.setter
    def io_status(self, io_status):
        """Sets the io_status of this StorageVolume.


        :param io_status: The io_status of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._io_status = io_status

    @property
    def itls(self):
        """Gets the itls of this StorageVolume.  # noqa: E501


        :return: The itls of this StorageVolume.  # noqa: E501
        :rtype: list[StorageVolumeItls]
        """
        return self._itls

    @itls.setter
    def itls(self, itls):
        """Sets the itls of this StorageVolume.


        :param itls: The itls of this StorageVolume.  # noqa: E501
        :type: list[StorageVolumeItls]
        """

        self._itls = itls

    @property
    def largest_free_chunk(self):
        """Gets the largest_free_chunk of this StorageVolume.  # noqa: E501


        :return: The largest_free_chunk of this StorageVolume.  # noqa: E501
        :rtype: int
        """
        return self._largest_free_chunk

    @largest_free_chunk.setter
    def largest_free_chunk(self, largest_free_chunk):
        """Sets the largest_free_chunk of this StorageVolume.


        :param largest_free_chunk: The largest_free_chunk of this StorageVolume.  # noqa: E501
        :type: int
        """

        self._largest_free_chunk = largest_free_chunk

    @property
    def provision_type(self):
        """Gets the provision_type of this StorageVolume.  # noqa: E501


        :return: The provision_type of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._provision_type

    @provision_type.setter
    def provision_type(self, provision_type):
        """Sets the provision_type of this StorageVolume.


        :param provision_type: The provision_type of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._provision_type = provision_type

    @property
    def storage_array_family(self):
        """Gets the storage_array_family of this StorageVolume.  # noqa: E501


        :return: The storage_array_family of this StorageVolume.  # noqa: E501
        :rtype: StorageArrayFamily
        """
        return self._storage_array_family

    @storage_array_family.setter
    def storage_array_family(self, storage_array_family):
        """Sets the storage_array_family of this StorageVolume.


        :param storage_array_family: The storage_array_family of this StorageVolume.  # noqa: E501
        :type: StorageArrayFamily
        """

        self._storage_array_family = storage_array_family

    @property
    def storage_array_name(self):
        """Gets the storage_array_name of this StorageVolume.  # noqa: E501


        :return: The storage_array_name of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._storage_array_name

    @storage_array_name.setter
    def storage_array_name(self, storage_array_name):
        """Sets the storage_array_name of this StorageVolume.


        :param storage_array_name: The storage_array_name of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._storage_array_name = storage_array_name

    @property
    def storage_volumetype(self):
        """Gets the storage_volumetype of this StorageVolume.  # noqa: E501


        :return: The storage_volumetype of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._storage_volumetype

    @storage_volumetype.setter
    def storage_volumetype(self, storage_volumetype):
        """Sets the storage_volumetype of this StorageVolume.


        :param storage_volumetype: The storage_volumetype of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._storage_volumetype = storage_volumetype

    @property
    def system_id(self):
        """Gets the system_id of this StorageVolume.  # noqa: E501


        :return: The system_id of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this StorageVolume.


        :param system_id: The system_id of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def thin_capable(self):
        """Gets the thin_capable of this StorageVolume.  # noqa: E501


        :return: The thin_capable of this StorageVolume.  # noqa: E501
        :rtype: bool
        """
        return self._thin_capable

    @thin_capable.setter
    def thin_capable(self, thin_capable):
        """Sets the thin_capable of this StorageVolume.


        :param thin_capable: The thin_capable of this StorageVolume.  # noqa: E501
        :type: bool
        """

        self._thin_capable = thin_capable

    @property
    def thin_rebuild(self):
        """Gets the thin_rebuild of this StorageVolume.  # noqa: E501


        :return: The thin_rebuild of this StorageVolume.  # noqa: E501
        :rtype: bool
        """
        return self._thin_rebuild

    @thin_rebuild.setter
    def thin_rebuild(self, thin_rebuild):
        """Sets the thin_rebuild of this StorageVolume.


        :param thin_rebuild: The thin_rebuild of this StorageVolume.  # noqa: E501
        :type: bool
        """

        self._thin_rebuild = thin_rebuild

    @property
    def use(self):
        """Gets the use of this StorageVolume.  # noqa: E501


        :return: The use of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this StorageVolume.


        :param use: The use of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._use = use

    @property
    def used_by(self):
        """Gets the used_by of this StorageVolume.  # noqa: E501


        :return: The used_by of this StorageVolume.  # noqa: E501
        :rtype: list[str]
        """
        return self._used_by

    @used_by.setter
    def used_by(self, used_by):
        """Sets the used_by of this StorageVolume.


        :param used_by: The used_by of this StorageVolume.  # noqa: E501
        :type: list[str]
        """

        self._used_by = used_by

    @property
    def vendor_specific_name(self):
        """Gets the vendor_specific_name of this StorageVolume.  # noqa: E501


        :return: The vendor_specific_name of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._vendor_specific_name

    @vendor_specific_name.setter
    def vendor_specific_name(self, vendor_specific_name):
        """Sets the vendor_specific_name of this StorageVolume.


        :param vendor_specific_name: The vendor_specific_name of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._vendor_specific_name = vendor_specific_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageVolume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageVolume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
