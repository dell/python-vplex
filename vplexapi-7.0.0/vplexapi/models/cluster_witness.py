# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vplexapi.models.admin_state import AdminState  # noqa: F401,E501
from vplexapi.models.cluster_witness_components import ClusterWitnessComponents  # noqa: F401,E501


class ClusterWitness(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_state': 'AdminState',
        'components': 'list[ClusterWitnessComponents]',
        'private_ip_address': 'str',
        'public_ip_address': 'str'
    }

    attribute_map = {
        'admin_state': 'admin_state',
        'components': 'components',
        'private_ip_address': 'private_ip_address',
        'public_ip_address': 'public_ip_address'
    }

    def __init__(self, admin_state=None, components=None, private_ip_address=None, public_ip_address=None):  # noqa: E501
        """ClusterWitness - a model defined in Swagger"""  # noqa: E501

        self._admin_state = None
        self._components = None
        self._private_ip_address = None
        self._public_ip_address = None
        self.discriminator = None

        if admin_state is not None:
            self.admin_state = admin_state
        if components is not None:
            self.components = components
        if private_ip_address is not None:
            self.private_ip_address = private_ip_address
        if public_ip_address is not None:
            self.public_ip_address = public_ip_address

    @property
    def admin_state(self):
        """Gets the admin_state of this ClusterWitness.  # noqa: E501


        :return: The admin_state of this ClusterWitness.  # noqa: E501
        :rtype: AdminState
        """
        return self._admin_state

    @admin_state.setter
    def admin_state(self, admin_state):
        """Sets the admin_state of this ClusterWitness.


        :param admin_state: The admin_state of this ClusterWitness.  # noqa: E501
        :type: AdminState
        """

        self._admin_state = admin_state

    @property
    def components(self):
        """Gets the components of this ClusterWitness.  # noqa: E501


        :return: The components of this ClusterWitness.  # noqa: E501
        :rtype: list[ClusterWitnessComponents]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this ClusterWitness.


        :param components: The components of this ClusterWitness.  # noqa: E501
        :type: list[ClusterWitnessComponents]
        """

        self._components = components

    @property
    def private_ip_address(self):
        """Gets the private_ip_address of this ClusterWitness.  # noqa: E501


        :return: The private_ip_address of this ClusterWitness.  # noqa: E501
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address):
        """Sets the private_ip_address of this ClusterWitness.


        :param private_ip_address: The private_ip_address of this ClusterWitness.  # noqa: E501
        :type: str
        """

        self._private_ip_address = private_ip_address

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this ClusterWitness.  # noqa: E501


        :return: The public_ip_address of this ClusterWitness.  # noqa: E501
        :rtype: str
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this ClusterWitness.


        :param public_ip_address: The public_ip_address of this ClusterWitness.  # noqa: E501
        :type: str
        """

        self._public_ip_address = public_ip_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterWitness, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterWitness):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
