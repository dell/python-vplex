# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vplexapi.models.vias_job_storage_pools import ViasJobStoragePools  # noqa: F401,E501


class ViasJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'base_name': 'str',
        'capacity': 'int',
        'consistency_group': 'str',
        'date_created': 'str',
        'description': 'str',
        'last_updated': 'str',
        'number_of_volumes': 'int',
        'status': 'str',
        'status_details': 'str',
        'storage_pools': 'list[ViasJobStoragePools]',
        'storage_views': 'list[str]',
        'target_cluster': 'str',
        'thin': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'base_name': 'base_name',
        'capacity': 'capacity',
        'consistency_group': 'consistency_group',
        'date_created': 'date_created',
        'description': 'description',
        'last_updated': 'last_updated',
        'number_of_volumes': 'number_of_volumes',
        'status': 'status',
        'status_details': 'status_details',
        'storage_pools': 'storage_pools',
        'storage_views': 'storage_views',
        'target_cluster': 'target_cluster',
        'thin': 'thin'
    }

    def __init__(self, name=None, base_name=None, capacity=None, consistency_group=None, date_created=None, description=None, last_updated=None, number_of_volumes=None, status=None, status_details=None, storage_pools=None, storage_views=None, target_cluster=None, thin=None):  # noqa: E501
        """ViasJob - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._base_name = None
        self._capacity = None
        self._consistency_group = None
        self._date_created = None
        self._description = None
        self._last_updated = None
        self._number_of_volumes = None
        self._status = None
        self._status_details = None
        self._storage_pools = None
        self._storage_views = None
        self._target_cluster = None
        self._thin = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if base_name is not None:
            self.base_name = base_name
        if capacity is not None:
            self.capacity = capacity
        if consistency_group is not None:
            self.consistency_group = consistency_group
        if date_created is not None:
            self.date_created = date_created
        if description is not None:
            self.description = description
        if last_updated is not None:
            self.last_updated = last_updated
        if number_of_volumes is not None:
            self.number_of_volumes = number_of_volumes
        if status is not None:
            self.status = status
        if status_details is not None:
            self.status_details = status_details
        if storage_pools is not None:
            self.storage_pools = storage_pools
        if storage_views is not None:
            self.storage_views = storage_views
        if target_cluster is not None:
            self.target_cluster = target_cluster
        if thin is not None:
            self.thin = thin

    @property
    def name(self):
        """Gets the name of this ViasJob.  # noqa: E501


        :return: The name of this ViasJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ViasJob.


        :param name: The name of this ViasJob.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def base_name(self):
        """Gets the base_name of this ViasJob.  # noqa: E501


        :return: The base_name of this ViasJob.  # noqa: E501
        :rtype: str
        """
        return self._base_name

    @base_name.setter
    def base_name(self, base_name):
        """Sets the base_name of this ViasJob.


        :param base_name: The base_name of this ViasJob.  # noqa: E501
        :type: str
        """

        self._base_name = base_name

    @property
    def capacity(self):
        """Gets the capacity of this ViasJob.  # noqa: E501


        :return: The capacity of this ViasJob.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ViasJob.


        :param capacity: The capacity of this ViasJob.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def consistency_group(self):
        """Gets the consistency_group of this ViasJob.  # noqa: E501


        :return: The consistency_group of this ViasJob.  # noqa: E501
        :rtype: str
        """
        return self._consistency_group

    @consistency_group.setter
    def consistency_group(self, consistency_group):
        """Sets the consistency_group of this ViasJob.


        :param consistency_group: The consistency_group of this ViasJob.  # noqa: E501
        :type: str
        """

        self._consistency_group = consistency_group

    @property
    def date_created(self):
        """Gets the date_created of this ViasJob.  # noqa: E501


        :return: The date_created of this ViasJob.  # noqa: E501
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ViasJob.


        :param date_created: The date_created of this ViasJob.  # noqa: E501
        :type: str
        """

        self._date_created = date_created

    @property
    def description(self):
        """Gets the description of this ViasJob.  # noqa: E501


        :return: The description of this ViasJob.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ViasJob.


        :param description: The description of this ViasJob.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def last_updated(self):
        """Gets the last_updated of this ViasJob.  # noqa: E501


        :return: The last_updated of this ViasJob.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ViasJob.


        :param last_updated: The last_updated of this ViasJob.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def number_of_volumes(self):
        """Gets the number_of_volumes of this ViasJob.  # noqa: E501


        :return: The number_of_volumes of this ViasJob.  # noqa: E501
        :rtype: int
        """
        return self._number_of_volumes

    @number_of_volumes.setter
    def number_of_volumes(self, number_of_volumes):
        """Sets the number_of_volumes of this ViasJob.


        :param number_of_volumes: The number_of_volumes of this ViasJob.  # noqa: E501
        :type: int
        """

        self._number_of_volumes = number_of_volumes

    @property
    def status(self):
        """Gets the status of this ViasJob.  # noqa: E501


        :return: The status of this ViasJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ViasJob.


        :param status: The status of this ViasJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this ViasJob.  # noqa: E501


        :return: The status_details of this ViasJob.  # noqa: E501
        :rtype: str
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this ViasJob.


        :param status_details: The status_details of this ViasJob.  # noqa: E501
        :type: str
        """

        self._status_details = status_details

    @property
    def storage_pools(self):
        """Gets the storage_pools of this ViasJob.  # noqa: E501


        :return: The storage_pools of this ViasJob.  # noqa: E501
        :rtype: list[ViasJobStoragePools]
        """
        return self._storage_pools

    @storage_pools.setter
    def storage_pools(self, storage_pools):
        """Sets the storage_pools of this ViasJob.


        :param storage_pools: The storage_pools of this ViasJob.  # noqa: E501
        :type: list[ViasJobStoragePools]
        """

        self._storage_pools = storage_pools

    @property
    def storage_views(self):
        """Gets the storage_views of this ViasJob.  # noqa: E501


        :return: The storage_views of this ViasJob.  # noqa: E501
        :rtype: list[str]
        """
        return self._storage_views

    @storage_views.setter
    def storage_views(self, storage_views):
        """Sets the storage_views of this ViasJob.


        :param storage_views: The storage_views of this ViasJob.  # noqa: E501
        :type: list[str]
        """

        self._storage_views = storage_views

    @property
    def target_cluster(self):
        """Gets the target_cluster of this ViasJob.  # noqa: E501


        :return: The target_cluster of this ViasJob.  # noqa: E501
        :rtype: str
        """
        return self._target_cluster

    @target_cluster.setter
    def target_cluster(self, target_cluster):
        """Sets the target_cluster of this ViasJob.


        :param target_cluster: The target_cluster of this ViasJob.  # noqa: E501
        :type: str
        """

        self._target_cluster = target_cluster

    @property
    def thin(self):
        """Gets the thin of this ViasJob.  # noqa: E501


        :return: The thin of this ViasJob.  # noqa: E501
        :rtype: bool
        """
        return self._thin

    @thin.setter
    def thin(self, thin):
        """Sets the thin of this ViasJob.


        :param thin: The thin of this ViasJob.  # noqa: E501
        :type: bool
        """

        self._thin = thin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ViasJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViasJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
