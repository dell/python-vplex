# coding: utf-8

"""
    VPlex REST API

    A definition for the next-gen VPlex API  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StoragePool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'total_free_space': 'float',
        'total_used_space': 'float',
        'total_space': 'float',
        'pool_types': 'str',
        'policies': 'str',
        'last_refreshed': 'str'
    }

    attribute_map = {
        'name': 'name',
        'total_free_space': 'total_free_space',
        'total_used_space': 'total_used_space',
        'total_space': 'total_space',
        'pool_types': 'pool_types',
        'policies': 'policies',
        'last_refreshed': 'last_refreshed'
    }

    def __init__(self, name=None, total_free_space=None, total_used_space=None, total_space=None, pool_types=None, policies=None, last_refreshed=None):  # noqa: E501
        """StoragePool - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._total_free_space = None
        self._total_used_space = None
        self._total_space = None
        self._pool_types = None
        self._policies = None
        self._last_refreshed = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if total_free_space is not None:
            self.total_free_space = total_free_space
        if total_used_space is not None:
            self.total_used_space = total_used_space
        if total_space is not None:
            self.total_space = total_space
        if pool_types is not None:
            self.pool_types = pool_types
        if policies is not None:
            self.policies = policies
        if last_refreshed is not None:
            self.last_refreshed = last_refreshed

    @property
    def name(self):
        """Gets the name of this StoragePool.  # noqa: E501


        :return: The name of this StoragePool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoragePool.


        :param name: The name of this StoragePool.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def total_free_space(self):
        """Gets the total_free_space of this StoragePool.  # noqa: E501


        :return: The total_free_space of this StoragePool.  # noqa: E501
        :rtype: float
        """
        return self._total_free_space

    @total_free_space.setter
    def total_free_space(self, total_free_space):
        """Sets the total_free_space of this StoragePool.


        :param total_free_space: The total_free_space of this StoragePool.  # noqa: E501
        :type: float
        """

        self._total_free_space = total_free_space

    @property
    def total_used_space(self):
        """Gets the total_used_space of this StoragePool.  # noqa: E501


        :return: The total_used_space of this StoragePool.  # noqa: E501
        :rtype: float
        """
        return self._total_used_space

    @total_used_space.setter
    def total_used_space(self, total_used_space):
        """Sets the total_used_space of this StoragePool.


        :param total_used_space: The total_used_space of this StoragePool.  # noqa: E501
        :type: float
        """

        self._total_used_space = total_used_space

    @property
    def total_space(self):
        """Gets the total_space of this StoragePool.  # noqa: E501


        :return: The total_space of this StoragePool.  # noqa: E501
        :rtype: float
        """
        return self._total_space

    @total_space.setter
    def total_space(self, total_space):
        """Sets the total_space of this StoragePool.


        :param total_space: The total_space of this StoragePool.  # noqa: E501
        :type: float
        """

        self._total_space = total_space

    @property
    def pool_types(self):
        """Gets the pool_types of this StoragePool.  # noqa: E501


        :return: The pool_types of this StoragePool.  # noqa: E501
        :rtype: str
        """
        return self._pool_types

    @pool_types.setter
    def pool_types(self, pool_types):
        """Sets the pool_types of this StoragePool.


        :param pool_types: The pool_types of this StoragePool.  # noqa: E501
        :type: str
        """

        self._pool_types = pool_types

    @property
    def policies(self):
        """Gets the policies of this StoragePool.  # noqa: E501


        :return: The policies of this StoragePool.  # noqa: E501
        :rtype: str
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this StoragePool.


        :param policies: The policies of this StoragePool.  # noqa: E501
        :type: str
        """

        self._policies = policies

    @property
    def last_refreshed(self):
        """Gets the last_refreshed of this StoragePool.  # noqa: E501


        :return: The last_refreshed of this StoragePool.  # noqa: E501
        :rtype: str
        """
        return self._last_refreshed

    @last_refreshed.setter
    def last_refreshed(self, last_refreshed):
        """Sets the last_refreshed of this StoragePool.


        :param last_refreshed: The last_refreshed of this StoragePool.  # noqa: E501
        :type: str
        """

        self._last_refreshed = last_refreshed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoragePool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragePool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
